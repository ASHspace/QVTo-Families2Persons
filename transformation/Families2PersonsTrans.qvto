modeltype Families uses Families('http://com.families');
modeltype Persons uses Persons('http://com.persons');

transformation Families2PersonsTrans(in src:Families, out dst:Persons);

main() {
	src.rootObjects()[Family].sons->map Member2Person();
	src.rootObjects()[Family].daughters->map Member2Person();
	src.rootObjects()[Family].father->map Member2Person();
	src.rootObjects()[Family].mother->map Member2Person();
}



query Families::Member::familyName() : String
{
	return if not self.familyFather.oclIsUndefined() then self.familyFather.lastName else if not
			self.familyMother.oclIsUndefined() then self.familyMother.lastName else if not self.familySon.oclIsUndefined()
			then self.familySon.lastName else self.familyDaughter.lastName endif endif endif
}



query Families::Member::isFemale() : Boolean
{
	return if not self.familyMother.oclIsUndefined() then true
	else if not self.familyDaughter.oclIsUndefined() then true
		else false
		endif endif
}



mapping Families::Member::Member2Person() : Persons::Person
disjuncts Families::Member::Member2Female, Families::Member::Member2Male {}



mapping Families::Member::Member2Female() : Persons::Female when { self.isFemale(); }
{
	result.fullName := self.firstName + ' ' + self.familyName();
}



mapping Families::Member::Member2Male() : Persons::Male when { not self.isFemale(); }
{
	result.fullName := self.firstName + ' ' + self.familyName();
}
